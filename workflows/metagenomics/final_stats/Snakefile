>>>>>># 08.10.20
# Metagenomics dereplication

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
###########################################      FINAL STATISTICS     ###########################################
################################################################################################################


##
# Map MAGs to original metagenomic fastq files
##
rule mag_mapping:
    input:
        drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
        read_dir="{projectpath}/MFS_00-InputData/{group}/metagenomic_reads"
    output:
        directory("{projectpath}/MFS_01-MAGMapping/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-MAG_mapping.py -fq_dir {input.read_dir} -bin_dir {input.drep_bin_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
        """


##
# Get MAG coverage for each sample in group
##
rule coverage:
    input:
        drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
        bam_MAGs="{projectpath}/MFS_01-MAGMapping/{group}"
    output:
        "{projectpath}/MFS_02-MAGCoverage/{group}/{group}.coverage_byMAG.txt"
    params:
        threads=expand("{threads}", threads=config['threads']),
        out_dir="{projectpath}/MFS_02-MAGCoverage",
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-MAG_coverage.py -bam_dir {input.bam_MAGs} -mag_dir {input.drep_bin_dir}  -out_dir {params.out_dir} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
        """

# #
# # CheckM quality of MAGs
# # #
# rule checkm:
#     input:
#         cov="{projectpath}/MFS_02-MAGCoverage/{group}/{group}.coverage_byMAG.txt",
#         drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
#     output:
#         directory("{projectpath}/MFS_03-BinQuality/{group}")
#     params:
#         group="{group}"
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-bin_quality.py -bin_dir {input.drep_bin_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
#         """
#

##
# Get MAG coverage on KOs
##
rule genes_coverage:
    input:
        MAG_cov="{projectpath}/MFS_02-MAGCoverage/{group}/{group}.coverage_byMAG.txt", # unnecessary for this rule, necessary for creating dependence
        drep_bin_dir="{projectpath}/MFS_00-InputData/{group}/dereplicated_bins",
        annot_dir="{projectpath}/MFS_00-InputData/{group}/annotation",
        bam_dir="{projectpath}/MFS_01-MAGMapping/{group}"
    output:
        directory("{projectpath}/MFS_03-KOAbundances/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        KO_DB=expand("{KO_DB}", KO_DB=config['KO_DB']),
        KO_list="{rules.get_paths.input.holopath}/workflows/metagenomics/final_stats/KO_list.txt",
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-MAG_map_split.py -mag_dir {input.drep_bin_dir} -bam_dir {input.bam_dir} -annot_dir {input.annot_dir} -out_dir {output} -KO_db {params.KO_DB} -KO_list {params.KO_list} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
        """
