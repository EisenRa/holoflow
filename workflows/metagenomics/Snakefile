# 29.04.20
configfile: "/home/projects/ku-cbd/people/nurher/holoflow/workflows/metagenomics/config.yaml"
################################################################################################################
############################################       METAGENOMICS     ############################################
################################################################################################################

##
# Assembly
##
rule assembly:
    input:
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq"

    output:
        "{projectpath}/05-Assembly/{sample}_file_to_remove"

    params:
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler']),
        out_dir="{projectpath}/05-Assembly/{sample}_assembly",
        temp_assembly="{projectpath}/05-Assembly/{sample}_assembly/temp_assembly.fa"

    shell:
        """
        python ./holoflow/bin/holo-assembly.py -1 {input.read1} -2 {input.read2} -m {params.memory} -t {params.threads} -k_megahit {params.klist_megahit} -k_spades {params.klist_spades} -a {params.assembler} -o {params.out_dir} -empty_o {output} -temp_a {params.temp_assembly}
        """



rule assembly_reformat:
    input:
        empt_file="{projectpath}/05-Assembly/{sample}_file_to_remove",
        stats_in="{projectpath}/04-MappedToHuman/{sample}.stats"
    output:
        "{projectpath}/05-Assembly/{sample}.stats"
    params:
        sample="{sample}",
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        in_assembly="{projectpath}/05-Assembly/{sample}_assembly/temp_assembly.fa",
        out_assembly="{projectpath}/05-Assembly/{sample}.fa"

    shell:
        """
        rm {input.empt_file} && python ./holoflow/bin/holo-assembly_reformat.py -s {params.sample} -min_cl {params.min_contig_len} -in_a {params.in_assembly} -out_a {params.out_assembly} -st_in {input.stats_in} -st_out {output}
        """


##
# Index assembly
##
rule assembly_index:
    input:
        "{projectpath}/05-Assembly/{sample}.fa"
    output: # FUTURE: ADD OPTION TO REMOVE ALL BUT FA.FAI
        samtools="{projectpath}/05-Assembly/{sample}.fa.fai",
        bwa_bwt="{projectpath}/05-Assembly/{sample}.fa.bwt",
        bwa_pac="{projectpath}/05-Assembly/{sample}.fa.pac",
        bwa_ann="{projectpath}/05-Assembly/{sample}.fa.ann",
        bwa_amb="{projectpath}/05-Assembly/{sample}.fa.amb",
        bwa_sa="{projectpath}/05-Assembly/{sample}.fa.sa"
    shell:
        """
        python ./holoflow/bin/holo-assembly_index.py -a {input} -ia {output.samtools}
        """

##
# Assembly mapping
##

rule assembly_mapping:
    input:
        assembly="{projectpath}/05-Assembly/{sample}.fa",
        samtools="{projectpath}/05-Assembly/{sample}.fa.fai",
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq"
    output:
        "{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python ./holoflow/bin/holo-assembly_mapping.py -a {input.assembly} -1 {input.read1} -2 {input.read2} -t {params.threads} -obam {output}
        """

##
# Prodigal ORF prediction
##
#"Metagenomes - The simplest approach for metagenomes is to put all the sequences in one FASTA file and analyze them in Anonymous Mode."
rule protein_prediction_prodigal:
    input:
        assembly="{projectpath}/05-Assembly/{sample}.fa"
    output:
        genetic_coords="{projectpath}/06-ProdigalPrediction/{sample}.coords.gbk",
        protein_translations="{projectpath}/06-ProdigalPrediction/{sample}.protein_translations.faa"
    shell: # Prodigal is run in "anon", Anonymous workflow
        """
        python ./holoflow/bin/holo-pp_prodigal.py -i {input.assembly} -o {output.genetic_coords} -a {output.protein_translations}
        """

##
# Create depth table
##

rule depth_table:
    input:
        "{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    output:
        metabat_depth_file="{projectpath}/07-Binning/{sample}_metabat/{sample}.depth.txt",
        maxbin_depth_file="{projectpath}/07-Binning/{sample}_maxbin/{sample}.depth.txt",
        concoct_depth_file="{projectpath}/07-Binning/{sample}_concoct/{sample}.depth.txt"

    shell:
        """
        python ./holoflow/bin/holo-depth_files.py -a {input} -mtb {output.metabat_depth_file} -mxb {output.maxbin_depth_file} -cct {output.concoct_depth_file}
        """

##
# BINNING TO ADD #####################
##

##
# Binning with metabat
##

rule binning_metabat:
    input:
        assembly="{projectpath}/05-Assembly/{sample}.fa",
        depth_table="{projectpath}/07-Binning/{sample}_metabat/{sample}.depth.txt"
    output:
        bin_table_mtb="{projectpath}/07-Binning/{sample}_metabat/{sample}.bins_metabat.txt"#,
        #final_file="{projectpath}/07-Binning/{sample}.metabat/{sample}.bins_metabat.gz"
    params:
        base_mtb="{projectpath}/07-Binning/{sample}_metabat/{sample}.mtb.bin",
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python ./holoflow/bin/holo-binning_metabat.py -a {input.assembly} -d {input.depth_table} -bt {output.bin_table_mtb}  -bb {params.base_mtb} -t {params.threads}
        """



##
# Binning with maxbin
##

rule binning_maxbin:
    input:
        assembly="{projectpath}/05-Assembly/{sample}.fa",
        depth_table="{projectpath}/07-Binning/{sample}_maxbin/{sample}.depth.txt"
    output:
        bin_table_mxb="{projectpath}/07-Binning/{sample}_maxbin/{sample}.bins_maxbin.txt"
    params:
        base_mxb="{projectpath}/07-Binning/{sample}_maxbin/{sample}.mxb.bin",
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python ./holoflow/bin/holo-binning_maxbin.py -a {input.assembly} -d {input.depth_table} -bt {output.bin_table_mxb} -bb {params.base_mxb} -t {params.threads}
        """


##
# Binning with concoct - ONLY CO-ASSEMBLY - default set to FALSE
##

rule binning_concoct:
    input:
        assembly="{projectpath}/05-Assembly/{sample}.fa",
        depth_table="{projectpath}/07-Binning/{sample}_concoct/{sample}.depth.txt"
    output:
        bin_table_cct="{projectpath}/07-Binning/{sample}_concoct/{sample}.bins_concoct.txt"
    params:
        coassembly=expand("{coassembly}", coassembly=config['coassembly']),
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        base_cct="{projectpath}/07-Binning/{sample}.concoct/{sample}.cct.bin",
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python ./holoflow/bin/holo-binning_concoct.py -a {input.assembly} -d {input.depth_table} -bt {output.bin_table_cct} -coa {params.coassembly} -bb {params.base_mxb} -t {params.threads} -l {params.min_contig_len}
        """
