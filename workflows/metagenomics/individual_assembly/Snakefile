# 29.04.20
configfile: "/home/projects/ku-cbd/people/nurher/holoflow/workflows/metagenomics/individual_assembly/config.yaml"

rule get_holopath:
    input:
        expand("{holopath}", holopath=config['holopath'])


################################################################################################################
############################################       METAGENOMICS     ############################################
################################################################################################################

##
# Assembly
##
rule assembly:
    input:
        read1="{projectpath}/PPR04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/PPR04-MappedToHuman/{sample}_2.fastq"

    output:
        "{projectpath}/MIA_01-Assembly/{sample}_file_to_remove"
    params:
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler']),
        out_dir="{projectpath}/MIA_01-Assembly/{sample}_assembly",
        temp_assembly="{projectpath}/MIA_01-Assembly/{sample}_assembly/temp_assembly.fa"

    shell:
        """
        python {rules.get_holopath.input}/bin/holo-assembly.py -1 {input.read1} -2 {input.read2} -m {params.memory} -t {params.threads} -k_megahit {params.klist_megahit} -k_spades {params.klist_spades} -a {params.assembler} -o {params.out_dir} -empty_o {output} -temp_a {params.temp_assembly}
        """



rule assembly_reformat:
    input:
        empt_file="{projectpath}/MIA_01-Assembly/{sample}_file_to_remove",
        stats_in="{projectpath}/PPR04-MappedToHuman/{sample}.stats"
    output:
        "{projectpath}/MIA_01-Assembly/{sample}.stats"
    params:
        sample="{sample}",
        min_contig_len=expand("{min_contig_len}", min_contig_len=config['min_contig_len']),
        in_assembly="{projectpath}/MIA_01-Assembly/{sample}_assembly/temp_assembly.fa",
        out_assembly="{projectpath}/MIA_01-Assembly/{sample}.fa"

    shell:
        """
        rm {input.empt_file} && python {rules.get_holopath.input}/bin/holo-assembly_reformat.py -s {params.sample} -min_cl {params.min_contig_len} -in_a {params.in_assembly} -out_a {params.out_assembly} -st_in {input.stats_in} -st_out {output}
        """


##
# Index assembly
##
rule assembly_index:
    input:
        "{projectpath}/MIA_01-Assembly/{sample}.fa"
    output: # FUTURE: ADD OPTION TO REMOVE ALL BUT FA.FAI
        samtools="{projectpath}/MIA_01-Assembly/{sample}.fa.fai",
        bwa_bwt="{projectpath}/MIA_01-Assembly/{sample}.fa.bwt",
        bwa_pac="{projectpath}/MIA_01-Assembly/{sample}.fa.pac",
        bwa_ann="{projectpath}/MIA_01-Assembly/{sample}.fa.ann",
        bwa_amb="{projectpath}/MIA_01-Assembly/{sample}.fa.amb",
        bwa_sa="{projectpath}/MIA_01-Assembly/{sample}.fa.sa"
    shell:
        """
        python {rules.get_holopath.input}/bin/holo-assembly_index.py -a {input} -ia {output.samtools}
        """

##
# Assembly mapping
##

rule assembly_mapping:
    input:
        assembly="{projectpath}/MIA_01-Assembly/{sample}.fa",
        samtools="{projectpath}/MIA_01-Assembly/{sample}.fa.fai",
        read1="{projectpath}/PPR04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/PPR04-MappedToHuman/{sample}_2.fastq"
    output:
        "{projectpath}/MIA_02-Assembly_mapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python {rules.get_holopath.input}/bin/holo-assembly_mapping.py -a {input.assembly} -1 {input.read1} -2 {input.read2} -t {params.threads} -obam {output}
        """

##
# Prodigal ORF prediction
##
#"Metagenomes - The simplest approach for metagenomes is to put all the sequences in one FASTA file and analyze them in Anonymous Mode."
rule protein_prediction_prodigal:
    input:
        assembly="{projectpath}/MIA_01-Assembly/{sample}.fa"
    output:
        genetic_coords="{projectpath}/MIA_02-ProdigalPrediction/{sample}.coords.gbk",
        protein_translations="{projectpath}/MIA_02-ProdigalPrediction/{sample}.protein_translations.faa"
    shell: # Prodigal is run in "anon", Anonymous workflow
        """
        python {rules.get_holopath.input}/bin/holo-pp_prodigal.py -i {input.assembly} -o {output.genetic_coords} -a {output.protein_translations}
        """

##
# Create depth table
##

rule depth_table:
    input:
        "{projectpath}/MIA_02-Assembly_mapping/{sample}.mapped.bam"
    output:
        metabat_depth_file="{projectpath}/MIA_03-Binning/{sample}_metabat/{sample}.depth.txt",
        maxbin_depth_file="{projectpath}/MIA_03-Binning/{sample}_maxbin/{sample}.depth.txt"

    shell:
        """
        python {rules.get_holopath.input}/bin/holo-depth_files_IA.py -a {input} -mtb {output.metabat_depth_file} -mxb {output.maxbin_depth_file}
        """

##
# BINNING TO ADD #####################
##

##
# Binning with metabat
##

rule binning_metabat:
    input:
        assembly="{projectpath}/MIA_01-Assembly/{sample}.fa",
        depth_table="{projectpath}/MIA_03-Binning/{sample}_metabat/{sample}.depth.txt"
    output:
        bin_table_mtb="{projectpath}/MIA_03-Binning/{sample}.bins_metabat.txt"#,
        #final_file="{projectpath}/MIA_03-Binning/{sample}.metabat/{sample}.bins_metabat.gz"
    params:
        base_mtb="{projectpath}/MIA_03-Binning/{sample}_metabat/{sample}.mtb.bin",
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python {rules.get_holopath.input}/bin/holo-binning_metabat.py -a {input.assembly} -d {input.depth_table} -bt {output.bin_table_mtb}  -bb {params.base_mtb} -t {params.threads}
        """



##
# Binning with maxbin
##

rule binning_maxbin:
    input:
        assembly="{projectpath}/MIA_01-Assembly/{sample}.fa",
        depth_table="{projectpath}/MIA_03-Binning/{sample}_maxbin/{sample}.depth.txt"
    output:
        bin_table_mxb="{projectpath}/MIA_03-Binning/{sample}.bins_maxbin.txt"
    params:
        base_mxb="{projectpath}/MIA_03-Binning/{sample}_maxbin/{sample}.mxb.bin",
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python {rules.get_holopath.input}/bin/holo-binning_maxbin.py -a {input.assembly} -d {input.depth_table} -bt {output.bin_table_mxb} -bb {params.base_mxb} -t {params.threads}
        """



##
# Bin refinement with DASTool using binning: metabat, maxbin and proteins from: prodigal
##
 # --proteins                 Predicted proteins in prodigal fasta format (>scaffoldID_geneNo).
 #                              Gene prediction step will be skipped if given. (optional)
rule das_tool:
    input:
        assembly="{projectpath}/MIA_01-Assembly/{sample}.fa",
        bin_table_mxb="{projectpath}/MIA_03-Binning/{sample}.bins_maxbin.txt",
        bin_table_mtb="{projectpath}/MIA_03-Binning/{sample}.bins_metabat.txt",
        pproteins="{projectpath}/MIA_02-ProdigalPrediction/{sample}.protein_translations.faa"
    output:
        "{projectpath}/MIA_03-Binning/{sample}_dastool/{sample}"
    params:
        threads=expand("{threads}", threads=config['threads']),
        bin_dir="{projectpath}/MIA_03-Binning/{sample}_dastool/{sample}.bins_dastool",
        search_eng=expand("{search_eng}", search_eng=config['search_eng']),
        dastool_db=expand("{dastool_db}", dastool_db=config['dastool_db'])
    shell:
        """
        python {rules.get_holopath.input}/bin/holo-binning_dastool.py -a {input.assembly} -bt_mtb {input.bin_table_mtb} -bt_mxb {input.bin_table_mxb} -p {input.pproteins} -o {output} -bin_o {params.bin_dir} -se {params.search_eng} -t {params.threads} -db {params.dastool_db} #-fbt {params.bin_tables_find}
        """


##
# CheckM
##


##
# RefineM bin refinement
##

# /home/projects/ku-cbd/people/antalb/software/RefineM/
