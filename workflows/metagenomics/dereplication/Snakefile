# 08.10.20
# Metagenomics dereplication

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
############################################       METAGENOMICS     ############################################
################################################################################################################


##
# dRep bin dereplication
##
rule drep_bins:
    input:
        dastool_bin_dir="{projectpath}/MDR_00-InputBins/{group}"
    output:
        directory("{projectpath}/MDR_01-BinDereplication/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_drep.py -dt_bd {input.dastool_bin_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
        """


##
# annotation with Prokka
##
rule bin_annotation:
    input:
        drep_bin_dir="{projectpath}/MDR_01-BinDereplication/{group}"
    output:
        directory("{projectpath}/MDR_02-BinAnnotation/{group}")
    params:
        threads=expand("{threads}", threads=config['threads']),
        group="{group}"
    shell:
        """
        python {rules.get_paths.input.holopath}/bin/holo-bin_annotation.py -bin_dir {input.drep_bin_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
        """






#OPTIONAL -----
# input_phylophlan=''
# output_phylophlan=''
# if config['SSPACE']:
#
#     ##
#     # Bin mapping
#     ##
#     rule bin_mapping:
#         input:
#             read1="{projectpath}/PPR_03-MappedToReference/{group}_1.fastq",
#             read2="{projectpath}/PPR_03-MappedToReference/{group}_2.fastq",
#             bin_dir="{projectpath}/MDR_01-BinDereplication/{group}"
#         output:
#             directory("{projectpath}/MDR_02-BinScaffolding/{group}/Mapped_bins")
#         params:
#             threads=expand("{threads}", threads=config['threads']),
#             group='{group}'
#         shell:
#             """
#             python {rules.get_paths.input.holopath}/bin/holo-bin_mapping.py -i1 {input.read1} -i2 {input.read2} -bin_dir {input.bin_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
#             """
#     ##
#     # SSPace contigs in bin scaffolding
#     ###

#     rule bin_scaffolding:
#         input:
#             fq_dir="{projectpath}/MDR_02-BinScaffolding/{group}/Mapped_bins",
#             drep_dir="{projectpath}/MDR_01-BinDereplication/{group}"
#         output:
#             directory("{projectpath}/MDR_02-BinScaffolding/{group}/Scaffolded_bins")
#         params:
#             threads=expand("{threads}", threads=config['threads']),
#             group='{group}'
#         shell:
#             """
#             python {rules.get_paths.input.holopath}/bin/holo-bin_scaffolding.py -fq_dir {input.fq_dir} -bin_dir {input.drep_dir} -out_dir {output} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
#             """
# #
#     #PhyloPhlAn will take as input SSPACE's output - scaffolded bins
#     input_phylophlan="{projectpath}/MDR_03-BinScaffolding/{group}/Scaffolded_bins"
#
#     if config['pipeline'] == tree:
#         output_phylophlan="{projectpath}/MDR_04-MAGPhylogenetics/{group}/Tree_Database"
#     else:
#         output_phylophlan="{projectpath}/MDR_04-MAGPhylogenetics/{group}/Matrix_Database"
#
#
# else:  #PhyloPhlAn will take as input the dereplicated genomes from dRep
#     input_phylophlan="{projectpath}/MDR_02-BinDereplication/{group}/dereplicated_genomes"
#
#     if config['pipeline'] == tree:
#         output_phylophlan="{projectpath}/MDR_03-MAGPhylogenetics/{group}/Tree_Database"
#     else:
#         output_phylophlan="{projectpath}/MDR_03-MAGPhylogenetics/{group}/Matrix_Database"
#
#
# ##
# # PhyloPhlAn Rule - drep/SSPACE input
# ##
# rule phylophlan:
#     input:
#         input_phylophlan
#     output:
#         directory(output_phylophlan)
#     params:
#         SSPACE=expand("{SSPACE}", SSPACE=config['SSPACE']),
#         diversity=expand("{diversity}", diversity=config['diversity']),
#         phylo_db=expand("{phylo_db}", phylo_db=config['phylo_db']),
#         pipeline=expand("{pipeline}", pipeline=config['pipeline']),
#         threads=expand("{threads}", threads=config['threads']),
#         group='{group}'
#     shell:
#         """
#         python {rules.get_paths.input.holopath}/bin/holo-phylophlan.py -genomes_dir {input} -div {params.diversity} -pip {params.pipeline} -ph_db {params.phylo_db} -out_dir {output} -ssp {params.SSPACE} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
#         """

##
# Prokka mag gene annotation
##



##
# GTDBTk phylogeny building
##
