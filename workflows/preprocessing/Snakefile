configfile:"/home/projects/ku-cbd/people/nurher/holoflow/workflows/preprocessing/config.yaml"
# threads info - Sen Li:
    # /home/projects/ku-cbd/data/HoloFood/SnakeMake_Scripts/holofood_snakemake_bwa
################################################################################################################
############################################       PREPROCESSING     ###########################################
################################################################################################################

##
# Quality-filtering
##

rule qual_filt:
    input:
        read1="{projectpath}/PPR_00-InputData/{sample}_1.fastq.gz",
        read2="{projectpath}/PPR_00-InputData/{sample}_2.fastq.gz"
    output:
        read1="{projectpath}/PPR_01-QualityFiltered/{sample}_1.fastq",
        read2="{projectpath}/PPR_01-QualityFiltered/{sample}_2.fastq",
        stats_file="{projectpath}/PPR_01-QualityFiltered/{sample}.stats"
    threads: 4
    params:
        adapter1=expand("{adapter1}", adapter1=config['adapter1']),
        adapter2=expand("{adapter2}", adapter2=config['adapter2']),
        maxns=expand("{maxns}", maxns=config['maxns']),
        minquality=expand("{minquality}", minquality=config['minquality']),
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        python ./holoflow/bin/holo-qual_filt.py -i1 {input.read1} -i2 {input.read2} -o1 {output.read1} -o2 {output.read2} -a1 {params.adapter1} -a2 {params.adapter2} -maxns {params.maxns} -minq {params.minquality} -t {params.threads} -s {output.stats_file}
        """



rule dup_rem_paired:
    input:
      read1="{projectpath}/PPR_01-QualityFiltered/{sample}_1.fastq",
      read2="{projectpath}/PPR_01-QualityFiltered/{sample}_2.fastq"
    output:
      dir="{projectpath}/PPR_02-DuplicatesRemoved/{sample}.merged.fastq"
    threads: 4
    params:
        separator=expand("{separator}", separator=config['separator']),
        by_n=expand("{by_n}", by_n=config['by_n']),
        by_s=expand("{by_s}", by_s=config['by_s']),
        file_to_dups=expand("{file_to_dups}", file_to_dups=config['file_to_dups']),
        ignore_case=expand("{ignore_case}", ignore_case=config['ignore_case'])

    shell:
        "python ./holoflow/bin/holo-dup_rem_paired.py -1 {input.read1} -2 {input.read2} -o {output.dir} -sep {params.separator} -n {params.by_n} -s {params.by_s} -D {params.file_to_dups} -i {params.ignore_case} "



rule dup_rem_paired_repair:
    input:
      in_file="{projectpath}/PPR_02-DuplicatesRemoved/{sample}.merged.fastq",
      in_stats="{projectpath}/PPR_01-QualityFiltered/{sample}.stats"
    output:
      read1="{projectpath}/PPR_02-DuplicatesRemoved/{sample}_1.fastq",
      read2="{projectpath}/PPR_02-DuplicatesRemoved/{sample}_2.fastq",
      out_stats="{projectpath}/PPR_02-DuplicatesRemoved/{sample}.stats"
    threads: 4
    params:
        separator=expand("{separator}", separator=config['separator'])
    shell:
        """
        python ./holoflow/bin/holo-dup_rem_paired_repair.py -i {input.in_file} -1 {output.read1} -2 {output.read2} -sep {params.separator} -si {input.in_stats} -so {output.out_stats}
        """


##
# Mapping to host
##

rule map_host:
    input:
        read1="{projectpath}/PPR_02-DuplicatesRemoved/{sample}_1.fastq",
        read2="{projectpath}/PPR_02-DuplicatesRemoved/{sample}_2.fastq",
        refgenome=expand("{refgenomehost}", refgenomehost=config['refgenomehost'])
    output:
        "{projectpath}/PPR_03-MappedToHost/{sample}_all.bam"
    params:
        host_t=expand("{host_t}", host_t=config['host_t']),
        host_k=expand("{host_k}", host_k=config['host_k']),
        host_w=expand("{host_w}", host_w=config['host_w']),
        host_d=expand("{host_d}", host_d=config['host_d']),
        host_A=expand("{host_A}", host_A=config['host_A']),
        host_B=expand("{host_B}", host_B=config['host_B']),
        host_O=expand("{host_O}", host_O=config['host_O']),
        host_E=expand("{host_E}", host_E=config['host_E']),
        host_L=expand("{host_L}", host_L=config['host_L']),
        host_R=expand("{host_R}", host_R=config['host_R'])
    shell:
        """
        python ./holoflow/bin/holo-map_host.py -1 {input.read1} -2 {input.read2} -hostrg {input.refgenome} -obam {output} -t {params.host_t} -k {params.host_k} -w {params.host_w} -d {params.host_d} -A {params.host_A} -B {params.host_B} -O {params.host_O} -E {params.host_E} -L {params.host_L} -R {params.host_R}
        """

rule map_host_split:
    input:
        refgenome=expand("{refgenomehost}", refgenomehost=config['refgenomehost']),
        all_bam="{projectpath}/PPR_03-MappedToHost/{sample}_all.bam"
    output:
        host="{projectpath}/PPR_03-MappedToHost/{sample}_host.bam",
        read1="{projectpath}/PPR_03-MappedToHost/{sample}_1.fastq",
        read2="{projectpath}/PPR_03-MappedToHost/{sample}_2.fastq"
    shell:
        """
        python ./holoflow/bin/holo-map_host_split.py -hostrg {input.refgenome} -ibam {input.all_bam} -1 {output.read1} -2 {output.read2} -obam {output.host}
        """

##
# Mapping to human
##
rule map_human:
    input:
        read1="{projectpath}/PPR_03-MappedToHost/{sample}_1.fastq",
        read2="{projectpath}/PPR_03-MappedToHost/{sample}_2.fastq",
        refgenome=expand("{refgenomehuman}", refgenomehuman=config['refgenomehuman'])
    output:
        "{projectpath}/PPR_04-MappedToHuman/{sample}_all.bam"
    params:
        human_t=expand("{human_t}", human_t=config['human_t']),
        human_k=expand("{human_k}", human_k=config['human_k']),
        human_w=expand("{human_w}", human_w=config['human_w']),
        human_d=expand("{human_d}", human_d=config['human_d']),
        human_A=expand("{human_A}", human_A=config['human_A']),
        human_B=expand("{human_B}", human_B=config['human_B']),
        human_O=expand("{human_O}", human_O=config['human_O']),
        human_E=expand("{human_E}", human_E=config['human_E']),
        human_L=expand("{human_L}", human_L=config['human_L']),
        human_R=expand("{human_R}", human_R=config['human_R'])
    shell:
        """
        python ./holoflow/bin/holo-map_human.py -1 {input.read1} -2 {input.read2} -hrg {input.refgenome} -obam {output} -t {params.human_t} -k {params.human_k} -w {params.human_w} -d {params.human_d} -A {params.human_A} -B {params.human_B} -O {params.human_O} -E {params.human_E} -L {params.human_L} -R {params.human_R}
        """

rule map_human_split:
    input:
        refgenome=expand("{refgenomehuman}", refgenomehuman=config['refgenomehuman']),
        all_bam="{projectpath}/PPR_04-MappedToHuman/{sample}_all.bam",
        in_stats="{projectpath}/PPR_02-DuplicatesRemoved/{sample}.stats"
    output:
        read1="{projectpath}/PPR_04-MappedToHuman/{sample}_1.fastq", ## mapped
        read2="{projectpath}/PPR_04-MappedToHuman/{sample}_2.fastq", ## mapped
        out_stats="{projectpath}/PPR_04-MappedToHuman/{sample}.stats"
    shell:
        """
        python ./holoflow/bin/holo-map_human_split.py -hrg {input.refgenome} -ibam {input.all_bam} -1 {output.read1} -2 {output.read2} -si {input.in_stats} -so {output.out_stats}
        """

#       print("############################ Holoflow has finished PREPROCESSING :) ############################")"
