# 15.12.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
##########################################       VARIANT CALLING     ###########################################
################################################################################################################



# BCFtools as variant caller

if config['var_caller'] == "bcftools":

    ##
    # call variants with BCFtools
    ##
    rule bcf_run:
        input:
            "{projectpath}/GNM_00-InputBams/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/{group}")
        params:
            degr_mapp_qual=expand("{degr_mapp_qual}", degr_mapp_qual=config['degr_mapp_qual']),
            min_mapp_qual=expand("{min_mapp_qual}", min_mapp_qual=config['min_mapp_qual']),
            min_base_qual=expand("{min_base_qual}", min_base_qual=config['min_base_qual']),
            chr_region=expand("{chr_region}", chr_region=config['chr_region']),
            multicaller=expand("{multicaller}", multicaller=config['multicaller']),
            not_indels=expand("{not_indels}", not_indels=config['not_indels']),
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_BCFtools.py  -bam_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -degr_mapp_qual {params.degr_mapp_qual} -min_mapp_qual {params.min_mapp_qual} -min_base_qual {params.min_base_qual} -chr_region {params.chr_region} -multicaller {params.multicaller} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath}
            """
        #python {rules.get_paths.input.holopath}/bin/holo-variant_BCFtools.py  -bam_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -degr_mapp_qual {params.degr_mapp_qual} -min_mapp_qual {params.min_mapp_qual} -min_base_qual {params.min_base_qual} -chr_region {params.chr_region} -multicaller {params.multicaller} -t {params.threads} -ID {params.group} -log {rules.get_paths.input.logpath} #-not_indels {params.not_indels}



# GATK as variant caller

if config['var_caller'] == "gatk":
    ##
    # run GATK per sample and chromosome
    ##
    rule get_samples:
        input:
            "{projectpath}/GNM_00-InputBams/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/individual_samples/{group}")
        params:
            min_pruning=expand("{min_pruning}", min_pruning=config['min_pruning']),
            min_dangling=expand("{min_dangling}", min_dangling=config['min_dangling']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_GATK_indv.py -bam_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -min_pruning {params.min_pruning} -min_dangling {params.min_dangling} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """


    ##
    # run GATK per chromosome on all group
    ##
    rule get_group:
        input:
            "{projectpath}/GNM_01-CalledVar/individual_samples/{group}"
        output:
            directory("{projectpath}/GNM_01-CalledVar/{group}")
        params:
            ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
            chr_list=expand("{chr_list}", chr_list=config['chr_list']),
            group="{group}",
            threads=expand("{threads}", threads=config['threads'])
        shell:
            """
            python {rules.get_paths.input.holopath}/bin/holo-variant_GATK_chr.py -vcf_dir {input} -out_dir {output} -ref_g {params.ref_genome} -chr_list {params.chr_list} -ID {params.group} -t {params.threads} -log {rules.get_paths.input.logpath}
            """



# ANGSD as variant caller

# if config['var_caller'] == "angsd": ### AND LOW DEPTH
#
#     ##
#     # call variants with ANGSD
#     ##
#     rule angsd_run:
#         input:
#             "{projectpath}/GNM_00-InputBams/{group}"
#         output:
#             directory("{projectpath}/GNM_01-CalledVar/{group}")
#         params:
#             model=expand("{model}", model=config['model']),
#             output_logL=expand("{output_logL}", output_logL=config['output_logL']),
#             major_minor=expand("{major_minor}", major_minor=config['major_minor']),
#             ref_genome=expand("{reference_genome}", reference_genome=config['reference_genome']),
#             chr_list=expand("{chr_list}", chr_list=config['chr_list']),
#             group="{group}",
#             threads=expand("{threads}", threads=config['threads'])
#         shell:



### Conditional HD

    ### - PHASING


### Conditional LD
#Reference panel in config has to be defined

    ### - LIKELIHOOD UPDATE


    ### - IMPUTATION
