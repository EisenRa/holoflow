# 15.12.20

rule get_paths:
    input:
        holopath=expand("{holopath}", holopath=config['holopath']),
        logpath=expand("{logpath}", logpath=config['logpath'])



################################################################################################################
##########################################       VARIANT CALLING     ###########################################
################################################################################################################



# BCFtools as variant caller

if config['var_caller'] == 'bcftools':

    ##
    # Index input bam
    ##
    rule index_bam:
        input:
            "{projectpath}/GVC_00-InputBams/{group}"
        output:
        params:
            group="{group}"
        shell:

    ##
    # call variants with BCFtools
    ##
    rule bcf_run:
        input:
        output:
        params:
            degr_mapp_qual=expand("{degr_mapp_qual}", degr_mapp_qual=config['degr_mapp_qual']),
            min_mapp_qual=expand("{min_mapp_qual}", min_mapp_qual=config['min_mapp_qual']),
            min_base_qual=expand("{min_base_qual}", min_base_qual=config['min_base_qual']),
            chr_region=expand("{chr_region}", chr_region=config['chr_region']),
            multicaller=expand("{multicaller}", multicaller=config['multicaller']),
            not_indels=expand("{not_indels}", not_indels=config['not_indels']),
            group="{group}"
        shell:


# GATK as variant caller

if config['var_caller'] == 'gatk':

    ##
    # run GATK per sample and chromosome
    ##
    rule get_samples:
        input:
            "{projectpath}/PPR_03-MappedToReference/{sample}_ref.bam"
        output:
        params:
            min_prunning=expand("{min_prunning}", min_prunning=config['min_prunning']),
            min_dangling=expand("{min_dangling}", min_dangling=config['min_dangling']),
            group="{group}"
        shell:


    ##
    # run GATK per chromosome on all group
    ##
    rule get_group:
        input:
        output:
        params:
            group="{group}"
        shell:



# ANGSD as variant caller

if config['var_caller'] == 'angsd':

    ##
    # call variants with ANGSD
    ##
    rule angsd_run:
        input:
            "{projectpath}/PPR_03-MappedToReference/{sample}_ref.bam"
        output:
        params:
            model=expand("{model}", model=config['model']),
            output_logL=expand("{output_logL}", output_logL=config['output_logL']),
            major_minor=expand("{major_minor}", major_minor=config['major_minor']),
            angsd_threads=expand("{angsd_threads}", angsd_threads=config['angsd_threads']),
            group="{group}"
        shell:
