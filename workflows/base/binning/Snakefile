configfile: "/home/projects/ku-cbd/people/nurher/holoflow/workflows/base/binning/config.yaml"
import os
import glob
import shutil

################### change final.contigs.fa before index assembly and binning_maxbin
    ########### use anvio py script to modify file: remove bad assemblies + weird headers
                ## ---> for this we need to create a conda environment, try to create one for all department
    ########### remove previous files, too heavy

##
# Index assembly
##
rule index_assembly:
    input:
        "{projectpath}/05-Assembly/final.contigs.fa"
    output:
        samtools="{projectpath}/05-Assembly/{sample}.fa.fai",
        bwa_bwt="{projectpath}/05-Assembly/{sample}.fa.bwt",
        bwa_pac="{projectpath}/05-Assembly/{sample}.fa.pac",
        bwa_ann="{projectpath}/05-Assembly/{sample}.fa.ann",
        bwa_amb="{projectpath}/05-Assembly/{sample}.fa.amb",
        bwa_sa="{projectpath}/05-Assembly/{sample}.fa.sa"
    run:
        if not os.path.exists("projectpath/05-Assembly/sample.fa.fai"):
            shell("module load tools samtools/1.9 && samtools faidx {input}")
            shell("module load tools bwa/0.7.15 && bwa index {input}")
        else:
            pass

##
# Assembly mapping
##

rule assembly_mapping:
    input:
        assembly="{projectpath}/05-Assembly/final.contigs.fa",
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq"
    output:
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        module load tools samtools/1.9 bwa/0.7.15 && bwa mem -t {params.threads} -R "@RG\tID:ProjectName\tCN:AuthorName\tDS:Mappingt\tPL:Illumina1.9\tSM:Sample" {input.assembly} {input.read1} {input.read2} | samtools view -T {input.assembly} -b - | samtools sort -T {input.assembly} - > {output.assemblybam}
        """


##
# Binning with metabat
##

rule binning_metabat:
    input:
        assembly_idx="{projectpath}/05-Assembly/{sample}.fa",
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    output:
        depth_file_mtb="{projectpath}/07-Binning/{sample}.metabat/{sample}.depth.txt",
        dir_mtb=directory("{projectpath}/07-Binning/{sample}.metabat"),
        bin_table_mtb="{projectpath}/07-Binning/bins_metabat.txt"
    params:
        threads=expand("{threads}", threads=config['threads'])
    run:
        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && jgi_summarize_bam_contig_depths --outputDepth {output.depth_file_mtb} {input.assemblybam}")
        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && metabat2 -i {input.assembly_idx} -a {output.depth_file_mtb} -o {output.dir_mtb} -m 1500 -t {params.threads} --unbinned")

        #Generate bin table
        bintable=open(output.bin_table_mtb,"a+")
        binlist = glob.glob(output.dir_mtb)
        for bin in binlist:
            binname = os.path.splitext(os.path.basename(bin))[0]+''
            with open(bin, 'r') as binfile:
               for line in binfile:
                    if line.startswith('>'):
                        contig = line.strip()
                        contig = contig.replace(">", "")
                        bintable.write("{0}\t{1}\r\n".format(contig,binname))
        bintable.close()


##
# Binning with maxbin
##

rule binning_maxbin:
    input:
        assembly_idx="{projectpath}/05-Assembly/{sample}.fa",
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    output:
        depth_file_mxb="{projectpath}/07-Binning/{sample}.maxbin/{sample}.depth.txt",
        dir_mxb=directory("{projectpath}/07-Binning/{sample}.maxbin"),
        bin_table_mxb="{projectpath}/07-Binning/bins_maxbin.txt"
    params:
        threads=expand("{threads}", threads=config['threads'])
    run:
        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && jgi_summarize_bam_contig_depths --outputDepth {output.depth_file_mxb} --noIntraDepthVariance {input.assemblybam}")
        shell("module unload gcc && module load tools perl/5.20.2 maxbin/2.2.7 fraggenescan/1.31 && run_MaxBin.pl -contig {input.assembly_idx} -abund {output.depth_file_mxb} -out {output.dir_mxb} -thread {params.threads}")

        #Generate bin table
        bintable=open(output.bin_table_mxb,"a+")
        binlist = glob.glob(output.dir_mxb)
        for bin in binlist:
            binname = os.path.splitext(os.path.basename(bin))[0]+''
            with open(bin, 'r') as binfile:
               for line in binfile:
                    if line.startswith('>'):
                        contig = line.strip()
                        contig = contig.replace(">", "")
                        bintable.write("{0}\t{1}\r\n".format(contig,binname))
        bintable.close()



##
# Bin refinement with DASTool
##

rule bin_refinement:
    input:
        assembly_idx="{projectpath}/05-Assembly/{sample}.fa",
        metabat_bintable="{projectpath}/07-Binning/bins_metabat.txt",
        maxbin_bintable="{projectpath}/07-Binning/bins_maxbin.txt",
        bincontig_tables = (",".join({input.metabat_bintable},{input.maxbin_bintable}))
    output:
        main_dir=directory("{projectpath}/07-Binning/Dastool_refinement"),
        bin_dir=directory("{projectpath}/07-Binning/Dastool_refinement/Dastool_bins")
    params:
        threads=expand("{threads}", threads=config['threads']),
        dastoolDependencies=expand("{dastoolDependencies}", dastoolDependencies=config['dastoolDependencies']),
        search_eng=expand("{search_eng}", search_eng=config['search_eng']),
        dastool_db=expand("{dastool_db}", dastool_db=config['dastool_db'])
    run:
        shell("{params.dastoolDependencies} && DAS_Tool -i {input.bincontig_tables} -c {input.assembly_idx} -o {output.main_dir} -l maxbin,metabat --search_engine {params.search_eng} -t {params.threads} --db_directory {params.dastool_db} --write_bins 1")

        #Move definitive bins to bin_dir
        import os
        import glob
        binsource=output.main_dir
        binfiles = glob.glob(os.path.join(binsource,'*.fa'))
        for b in binfiles:
            shutil.move(b, output.bin_dir)
