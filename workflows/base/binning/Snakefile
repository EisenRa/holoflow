configfile: "/home/projects/ku-cbd/people/nurher/holoflow/workflows/base/binning/config.yaml"


##
# Index assembly
##
    rule index_assembly:
        input:
            "{projectpath}/05-Assembly/final.contigs.fa"
        output:
            samtools="{projectpath}/05-Assembly/{sample}.fa.fai"
            bwa_bwt="{projectpath}/05-Assembly/{sample}.fa.bwt"
            bwa_pac="{projectpath}/05-Assembly/{sample}.fa.pac"
            bwa_ann="{projectpath}/05-Assembly/{sample}.fa.ann"
            bwa_amb="{projectpath}/05-Assembly/{sample}.fa.amb"
            bwa_sa="{projectpath}/05-Assembly/{sample}.fa.sa"
        run:
            if not "projectpath/05-Assembly/sample.fa.fai":
                shell("module load tools samtools/1.9 && samtools faidx {input}")
                shell("module load tools bwa/0.7.15 && bwa index {input}")
            else:
                pass

##
# Assembly mapping
##

rule assembly_mapping:
    input:
        assembly="{projectpath}/05-Assembly/final.contigs.fa"
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq"
    output:
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    params:
        threads=expand("{threads}", threads=config['threads'])
    shell:
        """
        module load tools samtools/1.9 bwa/0.7.15 && bwa mem -t {params.threads} -R "@RG\tID:ProjectName\tCN:AuthorName\tDS:Mappingt\tPL:Illumina1.9\tSM:Sample" {input.assembly} {input.read1} {input.read2} | samtools view -T {input.assembly} -b - | samtools sort -T {input.assembly} - > {output.assemblybam}
        """


##
# Binning
##

rule binning_metabat:
    input:
        assembly_idx="{projectpath}/05-Assembly/{sample}.fa"
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    output:
        depth_file="{projectpath}/07-Binning/{sample}.metabat/{sample}.depth.txt"
        dir=directory("{projectpath}/07-Binning/{sample}.metabat")
        bin_table="{projectpath}/07-Binning/bins_metabat.txt"
    run:
        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && jgi_summarize_bam_contig_depths --outputDepth {output.depth_file} {input.assemblybam}")
        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && metabat2 -i {input.assembly_idx} -a {output.depth_file} -o {output.dir} -m 1500 -t {rules.assembly_mapping.params.threads} --unbinned ')

        #Generate bin table
        import os
        import glob
        bintable=open(output.bin_table,"a+")
        binlist = glob.glob(output.dir)
        for bin in binlist:
            binname = os.path.splitext(os.path.basename(bin))[0]+''
            with open(bin, 'r') as binfile:
               for line in binfile:
                    if line.startswith('>'):
                        contig = line.strip()
                        contig = contig.replace(">", "")
                        bintable.write("{0}\t{1}\r\n".format(contig,binname))
        bintable.close()


rule binning_maxbin:

    input:
        assembly_idx="{projectpath}/05-Assembly/{sample}.fa"
        assemblybam="{projectpath}/06-Assembly_mapping/{sample}.mapped.bam"
    output:
        depth_file="{projectpath}/07-Binning/{sample}.maxbin/{sample}.depth.txt"
        dir=directory("{projectpath}/07-Binning/{sample}.maxbin")
        bin_table="{projectpath}/07-Binning/bins_maxbin.txt"
    run:

        shell("module unload gcc && module load tools perl/5.20.2 metabat/2.12.1 && jgi_summarize_bam_contig_depths --outputDepth {output.depth_file} --noIntraDepthVariance {input.assemblybam}")
        shell("module unload gcc && module load tools perl/5.20.2 maxbin/2.2.7 fraggenescan/1.31 && run_MaxBin.pl -contig {input.assembly_idx} -abund {output.depth_file} -out {output.dir} -thread {rules.assembly_mapping.params.threads}")

        #Generate bin table
        import os
        import glob
        bintable=open(output.bin_table,"a+")
        binlist = glob.glob(output.dir)
        for bin in binlist:
            binname = os.path.splitext(os.path.basename(bin))[0]+''
            with open(bin, 'r') as binfile:
               for line in binfile:
                    if line.startswith('>'):
                        contig = line.strip()
                        contig = contig.replace(">", "")
                        bintable.write("{0}\t{1}\r\n".format(contig,binname))
        bintable.close()




















def bin_refinement(outpath,name,logfilepath,threads,memory):
    #              (projectname,projectpath,threads,memory,logfilepath)
#/home/projects/ku-cbd/people/nurher/chick_metafunk2_test/CA16_13F1b.binning/metabat
    print("Start bin refinement") #added

    bincontig_tables = ",".join(glob.glob(os.path.join(outpath,name+'.binning','bins_*.txt'))) #CHANGED
    #Input
    assemblypath = os.path.join(outpath, name + '.fna') #CHANGED
    dastoolpath = os.path.join(outpath,name+'.binning','refinement_dastool') #CHANGED
    if not os.path.exists(dastoolpath):
        os.makedirs(dastoolpath)
    dastoolbase = os.path.join(dastoolpath, 'dastool')

    logfile=open(logfilepath,"a+")
    current_time = time.strftime("%m.%d.%y %H:%M", time.localtime())
    logfile.write("{0} |    Refinning bins using DAS_Tool \r\n".format(current_time))
    logfile.close()

    #Refinement using DAS_Tool
    dastooldb = '/home/projects/ku-cbd/people/antalb/databases/dastool_db'
    dastoolDependencies = 'module load tools gcc/5.4.0 intel/perflibs/2018 R/3.6.1 ruby/2.6.3 pullseq/1.0.2 perl/5.24.0 ncbi-blast/2.6.0+ prodigal/2.6.3 das_tool/1.1.1 diamond/0.9.24 usearch/11.0.667'
    dastoolCmd = ''+dastoolDependencies+' && DAS_Tool -i '+bincontig_tables+' -c '+assemblypath+' -o '+dastoolbase+' -l maxbin,metabat --search_engine diamond -t '+threads+' --db_directory '+dastooldb+' --write_bins 1'
    subprocess.check_call(dastoolCmd, shell=True)

    #Refinement using Binning_refiner (problems with R dependencies)
    #module unload gcc gcc/5.1.0 && module load anaconda3/4.0.0 && Binning_refiner -i metafunk2_test2/merged/binning/refiner/ -p refined -plot

    #Move definitive bins to binning directory
    binsource = os.path.join(dastoolpath)   # dastoolpath,'dastool_DASTool_bins')
    bindestination = os.path.join(outpath,name+'.binning') #CHANGED
    binfiles = glob.glob(os.path.join(binsource,'*.fa'))
    for b in binfiles:
        shutil.move(b, bindestination)
