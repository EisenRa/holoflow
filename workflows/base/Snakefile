configfile: "config.yaml"

##
# Quality-filtering
##

rule qual_filt:
    input:
      read1="{projectpath}/00-Rawdata/{sample}_1.fastq.gz",
      read2="{projectpath}/00-Rawdata/{sample}_2.fastq.gz",
    output:
      read1="{projectpath}/01-QualityFiltered/{sample}_1.fastq",
      read2="{projectpath}/01-QualityFiltered/{sample}_2.fastq"
    params:
        adapter1=expand("{adapter1}", adapter1=config['adapter1']),
        adapter2=expand("{adapter2}", adapter2=config['adapter2']),
        maxns=expand("{maxns}", maxns=config['maxns']),
        minquality=expand("{minquality}", minquality=config['minquality']),
        threads=expand("{threads}", threads=config['threads'])
    shell:
        "module unload gcc tools ngs && module load tools gcc/5.4.0 AdapterRemoval/2.1.3 && AdapterRemoval --file1 {input.read1} --file2 {input.read2} --output1 {output.read1} --output2 {output.read2} --trimqualities --trimns --maxns {params.maxns} --minquality {params.minquality} --threads {params.threads} --adapter1 {params.adapter1} --adapter2 {params.adapter2}"

##
# Duplicate removal (single-based)
##

rule dup_rem_single:
    input:
      read1="{projectpath}/01-QualityFiltered/{sample}_1.fastq",
      read2="{projectpath}/01-QualityFiltered/{sample}_2.fastq"
    output:
      read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq.tmp",
      read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq.tmp"
    run:
      shell("module load tools pigz/2.3.4 seqkit/0.7.1 && cat {input.read1} | seqkit rmdup -s -o {output.read1}")
      shell("module load tools pigz/2.3.4 seqkit/0.7.1 && cat {input.read2} | seqkit rmdup -s -o {output.read2}")

rule dup_rem_single_repair:
    input:
      read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq.tmp",
      read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq.tmp"
    output:
      read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq",
      read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq"
    shell:
      "module load tools jre/1.8.0 bbmap/36.49 && repair.sh in={input.read1} in2={input.read2} out={output.read1} out2={output.read2} overwrite=t && rm {input.read1} {input.read2}"

##
# Duplicate removal (pair-based)
##

rule dup_rem_paired:
    input:
      read1="{projectpath}/01-QualityFiltered/{sample}_1.fastq",
      read2="{projectpath}/01-QualityFiltered/{sample}_2.fastq"
    output:
      "{projectpath}/02-DuplicatesRemoved/{sample}.merged.fastq"
    params:
        separator=expand("{separator}", separator=config['separator'])
    run:
      shell("module load tools pigz/2.3.4 seqkit/0.7.1 && paste -d {params.separator} {input.read1} {input.read2} | seqkit rmdup -s -j 28 -o {output} ")

rule dup_rem_paired_repair:
    input:
      "{projectpath}/02-DuplicatesRemoved/{sample}.merged.fastq"
    output:
      read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq",
      read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq"
    params:
        separator=expand("{separator}", separator=config['separator'])
    run:
      shell("cut --delimiter={params.separator} -f1 {input} > {output.read1}")
      shell("cut --delimiter={params.separator} -f2 {input} > {output.read2}")
      shell("rm {input}")

##
# Mapping to host
##
rule map_host:
    input:
        read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq",
        read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq",
        refgenome=expand("{refgenome}", refgenome=config['refgenome'])
    output:
        "{projectpath}/03-MappedToHost/{sample}_all.bam"
    run:
      shell("module load tools samtools/1.9 bwa/0.7.15 && bwa mem -t 28 -R '@RG\tID:ProjectName\tCN:AuthorName\tDS:Mappingt\tPL:Illumina1.9\tSM:Sample' {input.refgenome} {input.read1} {input.read2} | samtools view -T {input.refgenome} -b - > {output}")

rule map_host_split:
    input:
        read1="{projectpath}/02-DuplicatesRemoved/{sample}_1.fastq",
        read2="{projectpath}/02-DuplicatesRemoved/{sample}_2.fastq",
        refgenome=expand("{refgenome}", refgenome=config['refgenome']),
        all_bam="{projectpath}/03-MappedToHost/{sample}_all.bam"
    output:
        host="{projectpath}/03-MappedToHost/{sample}_host.bam",
        read1="{projectpath}/03-MappedToHost/{sample}_1.fastq",
        read2="{projectpath}/03-MappedToHost/{sample}_2.fastq"
    shell:
        """
        module load tools samtools/1.9 && samtools view -T {input.refgenome} -b -F12 {input.all_bam} > {output.host}
        module load tools samtools/1.9 && samtools view -T {input.refgenome} -b -f12 {input.all_bam} | samtools fastq -1 {output.read1} -2 {output.read2} -
        rm {input.all_bam}
        """
