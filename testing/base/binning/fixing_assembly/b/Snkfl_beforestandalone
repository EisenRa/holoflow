import shutil
# 24.04.20
configfile: "/home/projects/ku-cbd/people/nurher/holoflow/testing/base/config.yaml"
##
# Assembly
##
rule assembly:
    input:
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq"

    output:
        dir=directory("{projectpath}/05-Assembly/{sample}_assembly")

    params:
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler'])

    run:

        if not os.path.exists(str(output.dir)):

            if params.assembler == 'spades':
                shell("mkdir {output.dir} && module unload anaconda3/4.4.0 && module load tools anaconda3/2.1.0 spades/3.13.1 perl/5.20.2 && metaspades.py -1 {input.read1} -2 {input.read2} -t {params.threads} -m {params.memory} -k {params.klist_spades} --only-assembler -o {output.dir}")

            else: # See why snakemake skips second if - find an alternative
                shell("mkdir {output.dir} && module load tools megahit/1.1.1 && megahit -1 {input.read1} -2 {input.read2} -t {params.threads} --k-list {params.klist_megahit} -o {output.dir}")



rule assembly_move:
    input:
        dir="{projectpath}/05-Assembly/{sample}_assembly"
    output:
        temp_assembly="{projectpath}/05-Assembly/{sample}_temp_.fa"

    params:
        assembler=expand("{assembler}", assembler=config['assembler']),
        sample="{sample}"

    run:
        if params.assembler == "spades":
             shell('cd {input.dir} && mv scaffolds.fasta {output.temp_assembly}')

        elif params.assembler == "megahit": # See why snakemake skips second if - find an alternative
             shell('cd {input.dir} && mv final.contigs.fa {output.temp_assembly}')


# os.chdir(str(output.dir))
# oldname = 'scaffolds.fasta'
# newname = str(params.sample+'_temp_.fa')
# shutil.move(oldname, newname)

rule assembly_reformat:
    input:
        stats_in="{projectpath}/04-MappedToHuman/{sample}.stats",
        temp_assembly="{projectpath}/05-Assembly/{sample}_temp_.fa"
    output:
        assembly="{projectpath}/05-Assembly/{sample}.fa",
        stats_out="{projectpath}/05-Assembly/{sample}.stats"


    run:
        with open(str(input.temp_assembly)) as f_input, open(str(output.assembly), 'w') as f_output:
            seq = ''
            contig_n = 0

            for line in f_input:
                if line.startswith('>'):

                    if seq:
                        if len(seq) > 1000:
                            contig_n += 1
                            contig_id = (">C_"+str(contig_n))
                            seq += ('\n')

                            f_output.write(contig_id + '\n' + seq)
                            seq = ''

                        else:
                            seq = ''
                else:
                    seq += line.strip()

            if seq:
                if len(seq) > 1000:
                    contig_n += 1
                    contig_id = (">C_"+str(contig_n))
                    seq += ('\n')
                    f_output.write(contig_id + '\n' + seq)

                else:
                    pass


            #Get stats after assembly
            contigs1 = len([1 for line in open(str(input.temp_assembly)) if line.startswith(">")])

            #Print stats to stats file
            shell("mv {input.stats_in} {output.stats_out}")
            statsfile=open(str(output.stats_out),"a+")
            statsfile.write("Assembly contigs\t{0} \r\n".format(contigs1))

            #Get stats after assembly reformat
            contigs2 = len([1 for line in open(str(output.assembly)) if line.startswith(">")])

            #Print stats to stats file
            statsfile.write("Reformated assembly contigs\t{0} \r\n".format(contigs2))
            statsfile.close()
