
configfile: "/home/projects/ku-cbd/people/nurher/holoflow/testing/base/config.yaml"
##
# Assembly
##
rule assembly:
    input:
        read1="{projectpath}/04-MappedToHuman/{sample}_1.fastq",
        read2="{projectpath}/04-MappedToHuman/{sample}_2.fastq",
        stats_in="{projectpath}/04-MappedToHuman/{sample}.stats"

    output:
        dir=directory("{projectpath}/05-Assembly/{sample}_assembly")
    params:
        sample="{sample}",
        memory=expand("{memory}", memory=config['memory']),
        klist_megahit=expand("{klist_megahit}", klist_megahit=config['klist_megahit']),
        klist_spades=expand("{klist_spades}", klist_spades=config['klist_spades']),
        threads=expand("{threads}", threads=config['threads']),
        assembler=expand("{assembler}", assembler=config['assembler'])
    run:
        if params.assembler == "megahit":
            shell("module load tools megahit/1.1.1 && mkdir {output.dir} && megahit -1 {input.read1} -2 {input.read2} -t {params.threads} --k-list {params.klist_megahit} -o {output.dir}")
            shell("mv {output.dir}/final.contigs.fa temp_assembly.fa")
        if params.assembler == "spades":
            shell("module unload anaconda3/4.4.0 && module load tools anaconda3/2.1.0 spades/3.13.1 perl/5.20.2 && mkdir {output.dir} && metaspades.py -1 {input.read1} -2 {input.read2} -t {params.threads} -m {params.memory} -k {params.klist_spades} --only-assembler -o {output.dir}")
            shell("mv {output.dir}/scaffolds.fasta temp_assembly.fa")


        #Get stats after assembly
        contigs = len([1 for line in open(str(output.dir+'/temp_assembly.fa')) if line.startswith(">")])

        #Print stats to stats file
        shell("mv {input.stats_in} {output.dir}/{params.sample}.stats")
        statsfile=open(str(output.dir+'/'+params.sample+'.stats'),"a+")
        statsfile.write("Assembly contigs\t{0} \r\n".format(contigs))
        statsfile.close()
#
# rule assembly_move:
#     params:
#         assembler=expand("{assembler}", assembler=config['assembler'])
#     input:
#         if params.assembler == "megahit":
#             megahit="{projectpath}/05-Assembly/{sample}/final.contigs.fa",
#             in_stats="{projectpath}/04-MappedToHuman/{sample}.stats"
#         else:
#             spades="{projectpath}/05-Assembly/{sample}/scaffolds.fasta",
#             in_stats="{projectpath}/04-MappedToHuman/{sample}.stats"
#     output:
#         final_file="{projectpath}/05-Assembly/{sample}/{sample}.assembly.fa",
#         stats_file="{projectpath}/05-Assembly/{sample}/{sample}.stats"
#
#     run:
#         if params.assembler == "megahit":
#             shell("mv {input.dir}/final.contigs.fa {output.final_file}")
#         else:
#             shell("mv {input.dir}/scaffolds.fasta {output.final_file}")
#
#         shell("mv {input.in_stats} {output.stats_file}")
#
#         #Get stats after assembly
#         contigs = len([1 for line in open(str(output.final_file)) if line.startswith(">")])
#
#         #Print stats to stats file
#         statsfile=open(str(output.stats_file),"a+")
#         statsfile.write("Assembly contigs\t{0} \r\n".format(contigs))
#         statsfile.close()
#

rule assembly_reformat:
    input:
        in_stats="{projectpath}/05-Assembly/{sample}_assembly/{sample}.stats",
        assembly="{projectpath}/05-Assembly/{sample}_assembly/temp_assembly.fa"
    output:
        "{projectpath}/05-Assembly/{sample}_assembly/{sample}.fa"


    run:
        with open(str(input.assembly)) as f_input, open(str(output), 'w') as f_output:
            seq = ''
            contig_n = 0

            for line in f_input:
                if line.startswith('>'):

                    if seq:
                        if len(seq) > 1000:
                            contig_n += 1
                            contig_id = (">C_"+str(contig_n))
                            seq += ('\n')

                            f_output.write(contig_id + '\n' + seq)
                            seq = ''

                        else:
                            seq = ''
                else:
                    seq += line.strip()

            if seq:
                if len(seq) > 1000:
                    contig_n += 1
                    contig_id = (">C_"+str(contig_n))
                    seq += ('\n')
                    f_output.write(contig_id + '\n' + seq)

                else:
                    pass

            #Get stats after assembly reformat
            contigs = len([1 for line in open(str(output)) if line.startswith(">")])

            #Print stats to stats file
            statsfile=open(str(input.in_stats),"a+")
            statsfile.write("Reformated assembly contigs\t{0} \r\n".format(contigs))
            statsfile.close()
